@model List<Kategori>

@{
    ViewData["Title"] = "Home Page";
}


<h1>Ana Kategoriler</h1>

<ul>
    @foreach (var item in Model.Where(x => x.UstKategoriId == null))
    {
        <li>
            <a href="#" onclick="toggleSubCategories(this); ShowSubCategories(@item.Id); return false;">@item.Ad</a>
            <ul class="sub-categories" data-parent-id="@item.Id" style="display:none;">
                @{
                    await ShowSubCategories(item.Id); //üst tarafta bu kategorinin id değerini alıp bu methoda gönderiyoruz bu methodda bu id ye bağlı alt kategorileri dönüp duruyor.

                   
                    
                }
            </ul>
        </li>
    }
</ul>    @*//bağlantı etiketine tıklandığında yani a elementine, tıklanan bağlantının takip ettiği ilk HTML elementinin yani ul elementi bunun görünürlüğü değiştirilerek veri nesnesine ait alt kategoriler ul içerisinde gizlenir veya gösterilir.*@

  <script src="~/lib/jquery/dist/jquery.min.js"></script>
<script>
    function toggleSubCategories(element) {
        var subCategories = element.nextElementSibling;
        subCategories.style.display = (subCategories.style.display === "block") ? "none" : "block";
    }


//ShowSubCategories fonksiyonu, bir parametre olarak verilen veri nesnesinin Id değerini alır ve bu Id değerine göre alt kategorileri listeleyebilir.Bu sayede, bağlantı etiketine tıklandığında ilk seviye alt kategoriler gösterilebilir ve eğer bir alt kategorinin bağlantısına da tıklanırsa, o alt kategorinin altında yer alan alt kategoriler gösterilebilir.Bu şekilde, sınırsız bir şekilde ilerleyebilir ve her seviye alt kategoriler gösterilebilir.

    @functions {
            public async Task ShowSubCategories(int parentId)
            {
                
        @using(CategoryandParentCategory.Context.DataContext db = new CategoryandParentCategory.Context.DataContext()){
                

        // Veritabanından ilgili kategoriye ait alt kategorileri çekin
                var subCategories = Model.Where(x => x.UstKategoriId == parentId).ToList();

                // Alt kategorileri listeleyin
                foreach (var item in subCategories)
                {
                        <li onclick="toggleSubCategories(this); return false;" > <a href="/Kategori/KategorininÜrünleri/@item.Id" > @item.Ad</a><span>  <span> (@db.Urunler.Count(x => x.KategoriId == item.Id)) </span > </li >

                    // Eğer alt kategorinin alt kategorisi varsa, alt kategorileri listeleyin
                    if (Model.Any(x => x.UstKategoriId == item.Id))
                    {
                                    <ul class="sub-categories"  data-parent-id="@item.Id" style="display:none;">
                                    @{
                                await ShowSubCategories(item.Id);

                              
                               
                                    }
                                        </ul>
                    }

                    
                }
            }
        }
    }







</script>


